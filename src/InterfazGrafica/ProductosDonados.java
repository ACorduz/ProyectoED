/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package InterfazGrafica;

import Data.Donnor;
import Data.Product;
import Data.Serializador;
import Estructure_DoubleLinkedList.DoubleLinkedList;
import Estructure_LinkedList.LinkedList;
import Trees.DisjointSet;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author die_a
 */
public class ProductosDonados extends javax.swing.JFrame {
    private String emailUsuario;
    private int rol;
    private DefaultTableModel mt = new DefaultTableModel();
    private int selectedRow = -1;
    /**
     * Creates new form ProductosDonados
     */
    public ProductosDonados() {
        initComponents();
        DoubleLinkedList<Product> listaProductos = (DoubleLinkedList<Product>) Serializador.deserializarObjeto("productos.dat");
        LinkedList<Product> indicesProductos = (LinkedList<Product>) Serializador.deserializarObjeto("indicesProductos.dat");
        LinkedList<Donnor> donadores = (LinkedList<Donnor>) Serializador.deserializarObjeto("donadores.dat");
        DisjointSet donanteSet = (DisjointSet)Serializador.deserializarObjeto("donantesset.dat");
        String email=this.emailUsuario;
        
        String ids[] = {"Nombre", "Categoría", "Cantidad", "Expiración", "Seleccionar"};
        mt = new DefaultTableModel(ids, 0) {
            @Override
            public Class<?> getColumnClass(int columnIndex) {
                if (columnIndex == 4) {
                    return Boolean.class;
                }
                return Object.class;
            }
        };
        jTable1.setModel(mt);
        addCheckBox(4, jTable1);
        
         // Llama a la función showProductsByDonor con el donador actual
        Donnor donador = obtenerDonadorPorEmail(email, donadores);
        showProductsByDonor(donador);
        
        // Obtener y mostrar los productos de la lista
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Producto", "Categoría", "Cantidad", "Expiracion"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel2.setText("Productos Publicados");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(164, 164, 164))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(0, 204, 102));

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Producto", "Categoría", "Cantidad", "Expiracion"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(48, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(104, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProductosDonados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProductosDonados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProductosDonados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProductosDonados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ProductosDonados().setVisible(true);
            }
        });
    }
    
    public void setEmailUsuario(String emailUsuario) {
        this.emailUsuario = emailUsuario;
    }
    
    public void setRol(int rol) {
        this.rol = rol;
    }
    
    public void addCheckBox(int column, JTable table) {
        TableColumn tc = table.getColumnModel().getColumn(column);
        tc.setCellEditor(table.getDefaultEditor(Boolean.class));
        tc.setCellRenderer(table.getDefaultRenderer(Boolean.class));
    }

    public boolean isSelected(int row, int column, JTable table) {
        Boolean s = (Boolean) table.getValueAt(row, column);
        return s != null && s;
    }

    public int checkSelectedProducts() {
        int selectedCount = 0;

        for (int i = 0; i < jTable1.getRowCount(); i++) {
            if (isSelected(i, 4, jTable1)) {
                selectedCount++;
            }
        }

        if (selectedCount == 0) {
            JOptionPane.showMessageDialog(this, "No has seleccionado ningún producto.", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (selectedCount > 2) {
            JOptionPane.showMessageDialog(this, "Solo se permite seleccionar un máximo de dos productos a la vez.", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            // Realiza acciones con los productos seleccionados
            System.out.println("Productos seleccionados:");
            for (int i = 0; i < jTable1.getRowCount(); i++) {
                if (isSelected(i, 4, jTable1)) {
                    String nombre = (String) jTable1.getValueAt(i, 0);
                    String categoria = (String) jTable1.getValueAt(i, 1);
                    int cantidad = (int) jTable1.getValueAt(i, 2);
                    String diaVencimiento = (String) jTable1.getValueAt(i, 3);
                    System.out.println("Nombre: " + nombre);
                    System.out.println("Categoría: " + categoria);
                    System.out.println("Cantidad: " + cantidad);
                    System.out.println("Expiración: " + diaVencimiento);
                }
            }
        }

        return selectedCount;
    }
    
    public void showProductsByDonor(Donnor donador) {
    // Obtén los productos donados por el donador y agrégalos al modelo de la tabla mt
    LinkedList<Product> indicesProductos = (LinkedList<Product>) Serializador.deserializarObjeto("indicesProductos.dat");
    DoubleLinkedList<Product> productsByDonor = new DoubleLinkedList<>();

    // Itera sobre la lista de productos para encontrar los asociados al donador
        System.out.println("email"+emailUsuario);
    for (int i = 0; i < indicesProductos.size(); i++) {
        Product product = indicesProductos.get(i);

        // Compara el correo electrónico del producto con el correo electrónico del donador
        if (product.getEmailDonor().equals(donador.getEmail())) {
            productsByDonor.pushBack(product);
        }
    }

    // Agrega los productos donados por el donador al modelo de la tabla
    if (!productsByDonor.empty()) {
        for (int i = 0; i < productsByDonor.size(); i++) {
            Product product = productsByDonor.get(i);
            String nombre = product.getNameProduct();
            String categoria = product.getTypeProduct();
            int cantidad = product.getQuantity();
            String diaVencimiento = product.getExpirationDate(); // Asegúrate de que este sea el formato adecuado
            // Puedes agregar la lógica para obtener el correo electrónico del donante si es necesario

            mt.addRow(new Object[]{nombre, categoria, cantidad, diaVencimiento, false});
        }
    }
}

public static Donnor obtenerDonadorPorEmail(String email, LinkedList<Donnor> listOfDonors) {
        for (int i = 0; i < listOfDonors.size(); i++) {
            Donnor donador = listOfDonors.get(i); // Obtén el donador en la posición i

            // Compara el correo electrónico del donador con el correo electrónico proporcionado
            if (donador.getEmail().equals(email)) {
                return donador; // Se encontró un donador con el correo electrónico proporcionado
            }
        }

        // No se encontró un donador con el correo electrónico proporcionado
        return null;
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables
}
